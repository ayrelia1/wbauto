from config import Bot, F, Router, FSInputFile, types, FSMContext, State, bot, CallbackData, file_config, json, bot_config_path, FSInputFile, time
from states import add_cabinet_state, add_template_state, edit_time_pars_state, load_reviews_state, duplicate_template_state, edit_template_state, give_admin
from markup import *
import filtersbot
from function import databasework, create_template_func
from datetime import timedelta
import datetime
import filtersbot
import aiocron
import random
from apiozon.api import ozon_api
from apiozon.auth import auth
import asyncio
import threading
import os

router = Router()







@router.message(filtersbot.AdminCheck(), F.text == '/start')
async def start(message: types.Message, state: FSMContext):
    #photo = FSInputFile('kwork8/photo/start_message.jpg')
    await state.clear()
    markup = start_markup()
    #await ozon_api.cabinets()
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ üëá', reply_markup=markup)
    

# -------------- –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ------------------ #

@router.callback_query(F.data == 'give_admin')
async def give_admin_handler(callback: types.CallbackQuery, state: FSMContext):
    markup = menu()
    await bot.edit_message_text(text='–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É\n\nID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∑–¥–µ—Å—å - https://t.me/getmyid_bot', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)
    await state.set_state(give_admin.one)

@router.message(give_admin.one)
async def give_admin_handler2(message: types.Message, state: FSMContext):
    id = message.text
    markup = menu()
    if id.isdigit():
        
        
        try:
            await databasework.update_status(id)
            await message.answer('–£—Å–ø–µ—à–Ω–æ, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—ã–¥–∞–Ω!', reply_markup=markup)
            await state.clear()
        except:
            await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', reply_markup=markup)
    else:
        await message.answer('–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö', reply_markup=markup)

# ------------------------–ö–∞–±–∏–Ω–µ—Ç—ã---------------------------- #

@router.callback_query(F.data == 'cabinets')
async def cabinets_get(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = 'get_cabinets_edit'
    markup = get_cabinets_markup(action, user_id)
    await bot.edit_message_text(text='–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã üëá', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)


@router.callback_query(filtersbot.CallbackDataFilter.filter(F.action.in_(['get_cabinets_edit'])))
async def custom_button(callback: types.CallbackQuery, state: FSMContext):
    call = callback.data.split(':')
    name = call[1]
    cabinet = await databasework.check_name_cabinet_db(name)
    
    markup = get_cabinet_markup(name)
    
    await bot.edit_message_text(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ - <b>{cabinet['profile_name']}</b>\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - <b><code>{cabinet['phone']}</code></b>\n\nID –ö–æ–º–ø–∞–Ω–∏–∏ - {cabinet['company_id']}", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')



# ------------------------–£–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç---------------------------- #



@router.callback_query(filtersbot.CallbackDataFilter.filter(F.action.in_(['delete_cabinet'])))
async def delete_cabinet(callback: types.CallbackQuery, state: FSMContext):
    call = callback.data.split(':')
    name = call[1]
    markup = menu()
    await databasework.delete_cabinet_db(name)
    await bot.edit_message_text(text='–ö–∞–±–∏–Ω–µ—Ç —É–¥–∞–ª–µ–Ω ‚úîÔ∏è', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)

    


# ------------------------–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é---------------------------- #

@router.callback_query(F.data == 'main')
async def go_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    #await start(callback.message, state)
    markup = start_markup()
    await bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ üëá', reply_markup=markup)


@router.callback_query(F.data == 'main2')
async def go_main2(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await start(callback.message, state)

# ------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞---------------------------- #
    
@router.callback_query(F.data == 'add_cabinet')
async def add_cabinet(callback: types.CallbackQuery, state: FSMContext):
    markup = menu()
    #await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω üëá', reply_markup=markup)
    await bot.edit_message_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ üëá', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)
    await state.set_state(add_cabinet_state.one)
    
    
@router.message(filtersbot.AdminCheck(), add_cabinet_state.one)
async def create_name_cabinet(message: types.Message, state: FSMContext):
    profile_name = message.text
    markup = menu()
    check_name = await databasework.check_name_cabinet_db(profile_name)
    if check_name == None:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∞—à–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 79000000000', reply_markup=markup)
        await state.update_data(profile_name=profile_name)
        await state.set_state(add_cabinet_state.two)
    else: await message.answer('–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è üëá', reply_markup=markup)
    
   

    
@router.message(filtersbot.AdminCheck(), add_cabinet_state.two)
async def insert_token(message: types.Message, state: FSMContext):
    markup = menu()
    phone = message.text
    data = await state.get_data()
    profile_name = data['profile_name']
    if phone.isdigit():
        id_session_phone = random.randint(100000000, 10000000000000)
        id_session_email = random.randint(100000000, 10000000000000)
        #await register_user(profile, phone, id_session_phone, id_session_email)
        #task = asyncio.create_task(register_user(profile, phone, id_session_phone, id_session_email))
        thread = threading.Thread(target=auth.register_user, args=(profile_name, phone, id_session_phone, id_session_email))
        await state.update_data(id_session_phone=id_session_phone, id_session_email=id_session_email, thread=thread, phone=phone)
        thread.daemon = True
        thread.start()
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –ª–∏–±–æ –∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>6</b> —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç!\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 100 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ —Å–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–µ—Ç—Å—è! üëá', reply_markup=markup, parse_mode='html')
        await state.set_state(add_cabinet_state.three)
    else: 
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 79000000000', reply_markup=markup)
        

        
@router.message(filtersbot.AdminCheck(), add_cabinet_state.three)
async def insert_token(message: types.Message, state: FSMContext):
    markup = menu()
    code = message.text
    if code.isdigit() and len(code) == 6:
        data = await state.get_data()
        id_session_phone = data['id_session_phone']
        databasework.insert_code_db(id_session_phone, code, types='phone')
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ <b>6</b> —Ü–∏—Ñ—Ä!\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 100 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ —Å–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–µ—Ç—Å—è! üëá', reply_markup=markup, parse_mode='html')
        await state.set_state(add_cabinet_state.four)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤!', reply_markup=markup)
        
@router.message(filtersbot.AdminCheck(), add_cabinet_state.four)
async def insert_token(message: types.Message, state: FSMContext):
    markup = menu()
    code = message.text
    if code.isdigit() and len(code) == 6:
        data = await state.get_data()
        id_session_email = data['id_session_email']
        databasework.insert_code_db(id_session_email, code, types='email')
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–ø–∞–Ω–∏–∏! üëá', reply_markup=markup, parse_mode='html')
        await state.set_state(add_cabinet_state.five)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤!', reply_markup=markup)
        
@router.message(filtersbot.AdminCheck(), add_cabinet_state.five)
async def insert_token(message: types.Message, state: FSMContext):
    markup = menu()
    company_id = message.text
    if company_id.isdigit():
        result = await databasework.check_company_id_cabinet_db(company_id)
        if result == None:
            data = await state.get_data()
            id_session_phone = data['id_session_phone']
            id_session_email = data['id_session_email']
            profile_name = data['profile_name']
            phone = data['phone']
            thread = data['thread']
            thread.join()
            result = databasework.check_code_db(id_session_phone)
            if result['result'] == 'error':
                await message.answer('–í–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç –µ—â–µ —Ä–∞–∑!', reply_markup=markup, parse_mode='html')
                await state.clear()
            else:
                await message.answer('–ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=markup, parse_mode='html')
                await databasework.insert_cabinet_db(profile_name, phone, company_id, message.from_user.id)
                await state.clear()
        else:
            await message.answer('–ö–∞–±–∏–Ω–µ—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=markup, parse_mode='html')
        
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=markup)        


# ------------------------–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞---------------------------- #

# @router.callback_query(F.data == 'add_template')
# async def add_cabinet(callback: types.CallbackQuery, state: FSMContext):
#     markup = text_or_no_markup()
#     #await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω üëá', reply_markup=markup)
#     await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω—É–∂–µ–Ω —à–∞–±–ª–æ–Ω üëá', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)


# #@router.message(filtersbot.AdminCheck(), add_template_state.one)
# #async def create_name_template(message: types.Message, state: FSMContext):
# @router.callback_query(F.data.in_(['review_with_text', 'review_no_text']))
# async def text_or_no(callback: types.CallbackQuery, state: FSMContext):
#     markup = menu()
#     if callback.data == 'review_with_text':
#         have_text = 'yes'
#     elif callback.data == 'review_no_text':
#         have_text = 'no'
#     await bot.edit_message_text(message_id=callback.message.message_id, chat_id=callback.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ üëá', reply_markup=markup)
#     await state.set_state(add_template_state.one)
#     await state.update_data(have_text=have_text)

# @router.message(filtersbot.AdminCheck(), add_template_state.one)
# async def create_name_template(message: types.Message, state: FSMContext):
#     name = message.text
#     markup = menu()
#     check_name = await databasework.check_name_template_db(name)
#     check_name2= await databasework.check_name_template_db_all(name)
#     if check_name == None and check_name2 == None:
#         await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –≤–≤–µ–¥–µ—Ç–µ * —Ç–æ —à–∞–±–ª–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ–Ω—Ç–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—Ç - –ø—Ä–∏–º–µ–Ω–∏—Ç –æ–±—â–∏–π üëá', reply_markup=markup, parse_mode='html')
#         await state.update_data(name=name)
#         await state.set_state(add_template_state.six)
#     else: await message.answer('–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è üëá', reply_markup=markup)


# @router.message(filtersbot.AdminCheck(), add_template_state.six)
# async def create_articul_template(message: types.Message, state: FSMContext):
#     try:
#         data = await state.get_data()
#         have_text = data['have_text']
        
#         articul = message.text
#         markup = menu()
        
#         if articul.isdigit():
#             check_articul = await databasework.check_name_articul_db(articul, have_text)
#         elif articul == '*':
#             check_articul = await databasework.check_name_articul_db_all(articul, have_text)
#         else:
#             raise ValueError
            
        
#         #check_name = await databasework.check_name_articul_db(articul)
#         if check_articul == None:
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è |\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 12343|345345|345456', reply_markup=markup, parse_mode='html')
#             await state.update_data(articul=articul)
#             await state.set_state(add_template_state.two)
#         else: await message.answer('–¢–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª üëá', reply_markup=markup)
#     except:
#         await message.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä –ª–∏–±–æ * üëá', reply_markup=markup)


# @router.message(filtersbot.AdminCheck(), add_template_state.two)
# async def create_offer_template(message: types.Message, state: FSMContext):
#     try:
#         markup = menu()
#         offer = message.text
#         offer_user = message.text
        
#         split_offer = offer.split('|')
#         if split_offer:    
#             for i in split_offer:
#                 if i.isdigit():
#                     pass
#                 else:
#                     raise ValueError
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ |\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>3|4|5</b>', reply_markup=markup, parse_mode='html')
#             await state.update_data(offer=split_offer, offer_user=offer_user)
#             await state.set_state(add_template_state.three)
#         else: await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ!')
#     except:
#         await message.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ —Ñ–æ—Ä–º–µ, –∞—Ä—Ç–∏–∫—É–ª—ã –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ—Ç –ª–∏ –º–µ–∂–¥—É –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –ø—Ä–æ–±–µ–ª–æ–≤ üëá', reply_markup=markup)


# @router.message(filtersbot.AdminCheck(), add_template_state.three)
# async def get_star_template(message: types.Message, state: FSMContext):
#     star = message.text
#     markup = menu()
#     try:
#         star = star.split('|')
#         for i in star:
#             if i.isdigit():
#                 a = int(i)
#                 if a < 1 or a > 5:
#                     raise Exception
#             else:
#                 await message.answer('–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤(–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–±–µ–ª –∏ —Ç.–¥)', reply_markup=markup)
#                 raise Warning 
#         data = await state.get_data()
#         have_text = data['have_text']
#         if have_text == 'yes':
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏\n\n–ü—Ä–∏–º–µ—Ä:\n\n<b>3:–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å|–Ω–µ –ø–æ–∫—É–ø–∞–π—Ç–µ & 4:–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ|–Ω–µ –æ—á–µ–Ω—å & 5:—Å–ª–æ–º–∞–ª–æ—Å—å|–ø—Ä–∏–µ—Ö–∞–ª–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ</b>\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–∞ –∫–∞–∂–¥—É—é –∏–∑ –æ—Ü–µ–Ω–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—è –∑–Ω–∞–∫ –¥–≤–æ–µ—Ç–æ—á–µ–π, –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å | —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã, –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ &, —Ç–æ –µ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ 3\n<b><code>3:—Å—Ç–æ–ø—Å–ª–æ–≤–æ1|—Å—Ç–æ–ø—Å–ª–æ–≤–æ2</code></b>\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –æ—Ü–µ–Ω–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫ &, —Ç–æ –µ—Å—Ç—å\n<b><code>3:—Å—Ç–æ–ø—Å–ª–æ–≤–æ1|—Å—Ç–æ–ø—Å–ª–æ–≤–æ2 & 4:—Å—Ç–æ–ø—Å–ª–æ–≤–æ3|—Å—Ç–æ–ø—Å–ª–æ–≤–æ4</code></b>\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—ã—à–µ!', reply_markup=markup, parse_mode='html')
#             await state.update_data(star=star)
#             await state.set_state(add_template_state.four)
#         else:
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏\n\n–ü—Ä–∏–º–µ—Ä:\n<b>3:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2 & 4:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2 & 5:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2</b>\n\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω—É–∂–Ω–æ —Ç–∞–∫–∏–º-–∂–µ –æ–±—Ä–∞–∑–æ–º –∫–∞–∫ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –∏–º–∏ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã\n\n–¢–∞–∫–∂–µ –≤ —Ç–µ–∫—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n<code>{name}</code> - –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n<code>{brand}</code> - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞\n<code>{offer}</code> - —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n<b><code>5:{name} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! {brand} —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å! –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä {offer}|–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {name}! –ù–∞—à –±—Ä–µ–Ω–¥ {brand} —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å! –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä {offer}</code></b>', reply_markup=markup, parse_mode='html')
#             await state.update_data(star=star, stop_words='', stop_words_user='')
#             await state.set_state(add_template_state.five)
                
            
#     except ValueError:
#         await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–∏—Ñ—Ä –æ—Ç 1 –¥–æ 5, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)
#     except Exception as ex: print(ex)
    
    
# @router.message(filtersbot.AdminCheck(), add_template_state.four)
# async def get_stop_words_template(message: types.Message, state: FSMContext):
#     stop_words = message.text
#     stop_words_user = message.text
#     markup = menu()
#     try:
#         stop_words = stop_words.split('&')
#         data = await state.get_data()
#         star = data['star']
#         star.sort()
#         check_ = []
#         for i in stop_words:
#             a = i.split(':')
#             b = a[0].strip()
#             check_.append(b)
#             b = int(b)
#         check_.sort()
        
#         if check_ == star:
#             pass
#         else: raise ValueError
        
#         await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏\n\n–ü—Ä–∏–º–µ—Ä:\n<b>3:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2 & 4:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2 & 5:—Ç–µ–∫—Å—Ç1|—Ç–µ–∫—Å—Ç2</b>\n\n–£–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω—É–∂–Ω–æ —Ç–∞–∫–∏–º-–∂–µ –æ–±—Ä–∞–∑–æ–º –∫–∞–∫ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –∏–º–∏ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã\n\n–¢–∞–∫–∂–µ –≤ —Ç–µ–∫—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n<code>{name}</code> - –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n<code>{brand}</code> - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞\n<code>{offer}</code> - —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n\n–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n<b><code>5:{name} —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! {brand} —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å! –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä {offer}|–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {name}! –ù–∞—à –±—Ä–µ–Ω–¥ {brand} —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å! –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä {offer}</code></b>', reply_markup=markup, parse_mode='html')
#         await state.update_data(stop_words=stop_words, stop_words_user=stop_words_user)
#         await state.set_state(add_template_state.five)
#     except:
#         await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)

    
# @router.message(add_template_state.five)
# async def get_text_template(message: types.Message, state: FSMContext):
#     texts = message.text
#     template_user = message.text
#     markup = menu()
#     try:
#         texts = texts.split('&')
#         data = await state.get_data()
#         star = data['star']
#         star.sort()
#         check_ = []
#         for i in texts:
#             a = i.split(':')
#             b = a[0].strip()
#             check_.append(b)
#             b = int(b)
#         check_.sort()
        
#         if check_ == star:
#             pass
#         else: raise ValueError
        
        
#         name = data['name']
#         star = data['star']
#         articul = data['articul']
#         stop_words = data['stop_words']
#         have_text = data['have_text']
#         offer = data['offer']
#         stop_words_user = data['stop_words_user']
#         offer_user = data['offer_user']
#         res = await create_template_func(name, articul, texts, star, stop_words, have_text, offer, template_user, stop_words_user, offer_user, message.from_user.id)
#         await message.answer('–û—Ç–ª–∏—á–Ω–æ! –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω.', reply_markup=markup, parse_mode='html')
#         await state.clear()
#     except Exception as ex:
#         print(ex)
#         await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)
    

# # --------------------------------- –®–∞–±–ª–æ–Ω—ã -------------------------------- #

# @router.callback_query(F.data == 'templates')
# async def get_templates(callback: types.CallbackQuery, state: FSMContext):
#     user_id = callback.from_user.id
#     markup = get_templates_markup_user(user_id)
#     await bot.edit_message_text(text='–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã üëá', message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup)


# @router.callback_query(filtersbot.Templates.filter(F.action.in_(['get_t'])))
# async def custom_button(callback: types.CallbackQuery, state: FSMContext):
#     call = callback.data.split(':')
#     name = call[1]
#     template = await databasework.check_name_template_db(name)
#     if template == None:
#         template = await databasework.check_name_template_db_all(name)
#     template_text = eval(template['template'])
#     star = eval(template['star'])
#     stop_words = eval(template['stop_words'])
#     have_text = template['have_text']
        
#     stars = ''
    
#     for i in star:
#         stars += f'{i}, '   
    
#     markup = get_template_markup(name, have_text)
    
#     await bot.edit_message_text(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ - <b>{template['name']}</b>\n\n–ê—Ä—Ç–∏–∫—É–ª - <b>{template['articul']}</b>\n\n–ù–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–∑—ã–≤–µ - <b>{template['have_text']}</b>\n\n–û—Ü–µ–Ω–∫–∏ - <b>{stars}</b>\n\n<b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá</b>", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')



# # ---------------------------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ -------------------------------- #



# @router.callback_query(filtersbot.EditTemplate.filter(F.action.in_(['del_t', 'dup_t', 'ed_t_t', 'ed_t_s', 'ed_t_a', 'ed_t_o'])))
# async def edit_template_(callback: types.CallbackQuery, state: FSMContext):
#     markup = menu()
#     call = callback.data.split(':')
#     print(call)
#     name = call[1]
#     have_text = call[2]
#     action = call[-1]
#     if action == 'del_t':
#         check_template = await databasework.check_name_template_db_all(name)
#         if check_template == None:
#             await databasework.delete_template_db(name)
#             await bot.edit_message_text(text=f"–®–∞–±–ª–æ–Ω {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#         else:
#             await databasework.delete_template_db_all(name)
#             await bot.edit_message_text(text=f"–®–∞–±–ª–æ–Ω {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
            
#     elif action == 'dup_t':
#         check_template = await databasework.check_name_template_db_all(name)
#         if check_template == None:
#             await bot.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π-–∂–µ —à–∞–±–ª–æ–Ω!", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#             await state.update_data(name=name, have_text=have_text) 
#             await state.set_state(duplicate_template_state.one)
#         else:
#             await bot.edit_message_text(text=f"–í—ã –º–æ–∂–µ—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ç —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª!", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#     elif action == 'ed_t_t':
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             template = await databasework.check_name_template_db_all(name)
#         text = template['template_user']
#         await bot.edit_message_text(text=f"–°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º —à–∞–±–ª–æ–Ω —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç:\n\n<b><code>{text}</code></b>\n\n<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º-–∂–µ —Ñ–æ—Ä–º–∞—Ç–µ!</b>", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#         await state.set_state(edit_template_state.one)
#         await state.update_data(name=name, have_text=have_text)
#     elif action == 'ed_t_s':
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             template = await databasework.check_name_template_db_all(name)
#         stop_words_user = template['stop_words_user']
#         await bot.edit_message_text(text=f"–°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º —à–∞–±–ª–æ–Ω —Ç–∞–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞:\n\n<b><code>{stop_words_user}</code></b>\n\n<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º-–∂–µ —Ñ–æ—Ä–º–∞—Ç–µ!</b>", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#         await state.set_state(edit_template_state.two)
#         await state.update_data(name=name, have_text=have_text)
#     elif action == 'ed_t_a':
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             template = await databasework.check_name_template_db_all(name)
#         articul = template['articul']
#         if articul == '*':
#             await bot.edit_message_text(text=f"–î–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –µ–≥–æ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#         else: 
#             await bot.edit_message_text(text=f"–°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º —à–∞–±–ª–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞—Ä—Ç–∏–∫—É–ª <b><code>{articul}</code></b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª.", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#             await state.set_state(edit_template_state.three)
#             await state.update_data(name=name, have_text=have_text)
#     elif action == 'ed_t_o':
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             template = await databasework.check_name_template_db_all(name)
#         offer_user = template['offer_user']
#         await bot.edit_message_text(text=f"–°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º —à–∞–±–ª–æ–Ω —Ç–∞–∫–∏–µ –æ—Ñ—Ñ–µ—Ä—ã:\n\n<b><code>{offer_user}</code></b>\n\n<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ç–∞–∫–æ–º-–∂–µ —Ñ–æ—Ä–º–∞—Ç–µ!</b>", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
#         await state.set_state(edit_template_state.four)
#         await state.update_data(name=name)
            
#     # ------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    
    
# @router.message(edit_template_state.one)
# async def edit_template_text_handler(message: types.Message, state: FSMContext):
#     try:
#         data = await state.get_data()
#         name = data['name']
#         texts = message.text
#         template_user_text = message.text
#         markup = menu()
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             template = await databasework.check_name_template_db_all(name)
#         try:
#             texts = texts.split('&')
#             star = eval(template['star'])
#             star.sort()
#             check_ = []
#             for i in texts:
#                 a = i.split(':')
#                 b = a[0].strip()
#                 check_.append(b)
#                 b = int(b)
#             check_.sort()
#             if check_ == star:
#                 pass
#             else: raise ValueError
#             texts = list(map(str.strip, texts))
#             texts = str(texts) 
#             if template['articul'] == '*':
#                 await databasework.update_template_text_all(texts, template_user_text, name)
#             else:
#                 await databasework.update_template_text(texts, template_user_text, name)
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup, parse_mode='html')
#             await state.clear()
#         except Exception as ex:
#             print(ex)
#             await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)
#     except Exception as ex:
#         print(ex)
    
    
    
#  # ----- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
    
    
# @router.message(edit_template_state.two)
# async def edit_template_stop_words_handler(message: types.Message, state: FSMContext):
#     try:
#         data = await state.get_data()
#         name = data['name']
#         have_text = data['have_text']
#         stop_words = message.text
#         stop_words_user = message.text
#         markup = menu()
#         if have_text == 'no':
#             await message.answer('–®–∞–±–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç–∑—ã–≤—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —É –Ω–µ–≥–æ –∂–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤!', reply_markup=markup)
#             await state.clear()
#         else:
#             template = await databasework.check_name_template_db(name)
#             if template == None:
#                 template = await databasework.check_name_template_db_all(name)
#             try:
#                 stop_words = stop_words.split('&')
#                 star = eval(template['star'])
#                 star.sort()
#                 check_ = []
#                 for i in stop_words:
#                     a = i.split(':')
#                     b = a[0].strip()
#                     check_.append(b)
#                     b = int(b)
#                 check_.sort()
#                 if check_ == star:
#                     pass
#                 else: raise ValueError
#                 stop_words = list(map(str.strip, stop_words))
#                 stop_words = str(stop_words) 
#                 if template['articul'] == '*':
#                     await databasework.update_template_stop_words_all(stop_words, stop_words_user, name)
#                 else:
#                     await databasework.update_template_stop_words(stop_words, stop_words_user, name)
#                 await message.answer('–û—Ç–ª–∏—á–Ω–æ! —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–Ω—ã!', reply_markup=markup, parse_mode='html')
#                 await state.clear()
#             except Exception as ex:
#                 print(ex)
#                 await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=markup)
#     except Exception as ex:
#         print(ex)
    
    
    
# # ----- –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª
    
    
# @router.message(edit_template_state.three)
# async def edit_template_articul_handler(message: types.Message, state: FSMContext):
#     try:
#         markup = menu()
#         data = await state.get_data()
#         articul_new = message.text
#         have_text = data['have_text']
#         name = data['name']
#         check_articul = await databasework.check_name_articul_db(articul_new, have_text)
#         if check_articul == None:
#             if articul_new.isdigit():
#                 await databasework.update_template_articul(articul_new, name)
#                 await message.answer(f'–£—Å–ø–µ—Ö! –ù–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª <b><code>{articul_new}</code></b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=markup, parse_mode='html')
#                 await state.clear()
#             else:
#                 await message.answer('–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è–∏—Ç—å –∏–∑ —Ü–∏—Ñ—Ä!', reply_markup=markup)
#         else:
#             await message.answer('–®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–µ–º —É–∂–µ –µ—Å—Ç—å!', reply_markup=markup)
#     except Exception as ex:
#         print(ex)
            
            
    
#  # ------ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤
    
    
# @router.message(edit_template_state.four)
# async def edit_template_offer_handler(message: types.Message, state: FSMContext):
#     try:
#         markup = menu()
#         data = await state.get_data()
#         offer_new_user = message.text
#         name = data['name']
#         offers_new = offer_new_user.split('|')
#         for i in offers_new:
#             if i.isdigit():
#                 pass
#             else: raise ValueError
#         offers_new = list(map(str.strip, offers_new))
#         offers_new = str(offers_new)
#         template = await databasework.check_name_template_db(name)
#         if template == None:
#             await databasework.update_template_offer_all(offers_new, offer_new_user, name)
#         else:
#             print('1')
#             await databasework.update_template_offer(offers_new, offer_new_user, name)
            
#         await message.answer(f'–ù–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! \n\n{offer_new_user}', reply_markup=markup)
#         await state.clear()
            
#     except Exception as ex:
#         print(ex)
#         await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤—å—Ç–µ –≤—Å–µ –ª–∏ –∞—Ä—Ç–∏–∫—É–ª—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply=markup)
            
    
    
# # --------------------------- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ ---------------------------- #
    
# @router.message(duplicate_template_state.one)
# async def duplicate_template_(message: types.Message, state: FSMContext):
#     articul = message.text
#     markup = menu()
    
#     if articul.isdigit():
#         data = await state.get_data()
#         have_text = data['have_text']
#         check_articul = await databasework.check_name_articul_db(articul, have_text)
#         if check_articul == None:
#             await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', reply_markup=markup)
#             await state.update_data(articul=articul)
#             await state.set_state(duplicate_template_state.two)
#         else: await message.answer('–®–∞–±–ª–æ–Ω –Ω–∞ —Ç–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π.', reply_markup=markup)
#     else: await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä!', reply_markup=markup)


# @router.message(duplicate_template_state.two)
# async def duplicate_template_(message: types.Message, state: FSMContext):
#     name = message.text
#     markup = menu()
    
#     check_articul = await databasework.check_name_template_db(name)
#     if check_articul == None:
#         data = await state.get_data()
#         old_name = data['name']
#         articul = data['articul']
#         await databasework.insert_duplicate_template_db(name, articul, old_name)
#         await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —à–∞–±–ª–æ–Ω {name} —Å–æ–∑–¥–∞–Ω!', reply_markup=markup)
#         await state.clear()
#     else: await message.answer('–®–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ', reply_markup=markup)

# ---------------------------------- –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥ –ø–∞—Ä—Å–µ—Ä–∞ -------------------------------- #


@router.callback_query(F.data == 'edit_time_pars')
async def time_pars(callback: types.CallbackQuery, state: FSMContext):
    markup = menu()
    await bot.edit_message_text(text=f"–°–µ–π—á–∞—Å –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∫–∞–∂–¥—ã–µ <b>{file_config['time_pars']} —Å–µ–∫—É–Ω–¥</b>, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∫–∞—Ö –æ—Ç 300 –¥–æ 3600.", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
    await state.set_state(edit_time_pars_state.one)

@router.message(edit_time_pars_state.one)
async def edit_time_pars(message: types.Message, state: FSMContext):
    markup = menu()
    time = message.text
    
    if time.isdigit():
        if (int(time) > 200 or int(time) < 1200):
            file_config['time_pars'] = int(time)
            with open(bot_config_path, 'w', encoding='utf-8') as file:
                json.dump(file_config, file, indent=4)  # indent=4 –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            await message.answer(f'–£—Å–ø–µ—à–Ω–æ! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{time} —Å–µ–∫—É–Ω–¥!</b>', parse_mode='html', reply_markup=markup)
            await state.clear()
        else: await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç 200 –¥–æ 1200 —Å–µ–∫—É–Ω–¥!', reply_markup=markup)
    else: await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=markup)




# ---------------------------------- –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã -------------------------------- #
@router.callback_query(F.data == 'load_reviews')
async def load_reviews(callback: types.CallbackQuery, state: FSMContext):
    action='get_cabinets'
    user_id = callback.from_user.id
    markup = get_cabinets_markup(action, user_id)
    await bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏ –∫–∞–±–∏–Ω–µ—Ç üëá", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
    #await state.set_state(edit_time_pars_state.one)
    
    
@router.callback_query(filtersbot.CallbackDataFilter.filter(F.action.in_(['get_cabinets'])))
async def custom_button(callback: types.CallbackQuery, state: FSMContext):
    markup = menu()
    call = callback.data.split(':')
    name_cabinet = call[1]
    res = await databasework.check_name_cabinet_db(name_cabinet)
    profile_name = res['profile_name']
    await state.update_data(profile_name=profile_name)
    await bot.edit_message_text(text=f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<b>–ì–ì–ì–ì.–ú–ú.–î–î-–ì–ì–ì–ì.–ú–ú.–î–î</b>\n\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É, –ø–æ—Ç–æ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 2023.11.11-2023.12.11", message_id=callback.message.message_id, chat_id=callback.message.chat.id, reply_markup=markup, parse_mode='html')
    await state.set_state(load_reviews_state.one)
    
import csv
@router.message(filtersbot.AdminCheck(), load_reviews_state.one)
async def create_name_cabinet(message: types.Message, state: FSMContext):
    name = message.text
    markup = menu2()
    try:
        dates = name.split('-')
        if len(dates) == 2:
            for i in dates:
                if len(i.split('.')) == 3:
                    pass
                else:
                    raise ValueError
            
            data = await state.get_data()
            profile_name = data['profile_name']
                    
            start_time = dates[0].replace('.', '-')
            end_time = dates[1].replace('.', '-')
            start_date = datetime.datetime.strptime(start_time, "%Y-%m-%d")
            end_date = datetime.datetime.strptime(end_time, "%Y-%m-%d")
            file_name = 'reviews.csv'
            result = await databasework.get_reviews_db(start_date, end_date, profile_name)
            
            with open(file_name, 'w', encoding='utf-8-sig', newline='') as file:
                writer = csv.writer(file, delimiter=';')
                writer.writerow(['uuid', 'client_name', 'star', 'articul', 'positive_text', 'negative_text', 'comment_text', 'answer', 'date'])
                for i in result:
                    uuid = i['uuid_review']
                    client_name = i['client_name']
                    star = i['star']
                    articul = i['articul']
                    positive_text = i['positive_text']
                    negative_text = i['negative_text']
                    comment_text = i['comment_text']
                    answer = remove_invisible_chars(i['answer'])
                    data = i['datetime']
                    writer.writerow([uuid, client_name, star, articul, positive_text, negative_text, comment_text, answer, data])
            
            file = FSInputFile(file_name)
            await bot.send_document(chat_id=message.chat.id, document=file, caption='–í—Å–µ –æ—Ç–∑—ã–≤—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø–µ—Ä–∏–æ–¥ üëÜ\n–§–æ—Ä–º–∞—Ç:\n\nuuid;–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞;–æ—Ü–µ–Ω–∫–∞;–∞—Ä—Ç–∏–∫—É–ª;–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞;–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏;–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π;–æ—Ç–≤–µ—Ç;–¥–∞—Ç–∞', reply_markup=markup)
            os.remove(file_name)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É!', reply_markup=markup)
        
    except Exception as ex:
        print(ex)
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=markup)

def remove_invisible_chars(text):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    visible_chars = [char for char in text if char.isprintable()]

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
    cleaned_text = ''.join(visible_chars)

    return cleaned_text

handler1 = router