from config import types, InlineKeyboardBuilder
import filtersbot
from function import databasework



def start_markup():
    markup = (
        InlineKeyboardBuilder()
        .button(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç ‚ûï', callback_data='add_cabinet')
        .button(text='–ö–∞–±–∏–Ω–µ—Ç—ã üóí', callback_data='cabinets')
        # .button(text='–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω ‚ûï', callback_data='add_template')
        # .button(text='–®–∞–±–ª–æ–Ω—ã üìï', callback_data='templates')
        .button(text='–¢–∞–π–º–∏–Ω–≥ –ø–∞—Ä—Å–µ—Ä–∞ üñä', callback_data='edit_time_pars')
        .button(text='–í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã üìà', callback_data='load_reviews')
        .button(text='–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø üìà', callback_data='give_admin')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup


def menu():
    markup = (
        InlineKeyboardBuilder()
        .button(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô', callback_data='main')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup

def menu2():
    markup = (
        InlineKeyboardBuilder()
        .button(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô', callback_data='main2')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup


def get_cabinets_markup(action, user_id):
    cabinets = databasework.get_cabinets_user_id(user_id)
    markup = InlineKeyboardBuilder()
    
    for i in cabinets:
        name = i['profile_name']
        markup.row(types.InlineKeyboardButton(text=(f"{name}"), callback_data=filtersbot.CallbackDataFilter(action=action, cabinet=name).pack()))
    markup.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô', callback_data='main'))

    return markup.as_markup()

def get_cabinet_markup(name):
    action = 'delete_cabinet'
    markup = (
        InlineKeyboardBuilder()
        .button(text=('–£–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç ‚ûñ'), callback_data=filtersbot.CallbackDataFilter(action=action, cabinet=name).pack())
        .button(text=('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô'), callback_data='main')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup


def get_templates_markup():
    templates = databasework.get_templates_db()
    markup = InlineKeyboardBuilder()
    
    for i in templates:
        name = i['name']
        action = 'get_t'
        markup.row(types.InlineKeyboardButton(text=(f"{name}"), callback_data=filtersbot.Templates(action=action, name=name).pack()))
        
    templates_all = databasework.get_templates_db_all()
        
    for i in templates_all:
        name = i['name']
        action = 'get_t'
        markup.row(types.InlineKeyboardButton(text=(f"{name}"), callback_data=filtersbot.Templates(action=action, name=name).pack()))
    markup.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô', callback_data='main'))
    
    return markup.as_markup()


def get_templates_markup_user(user_id):
    templates = databasework.get_templates_db_user(str(user_id))
    markup = InlineKeyboardBuilder()
    for i in templates:
        name = i['name']
        action = 'get_t'
        markup.row(types.InlineKeyboardButton(text=(f"{name}"), callback_data=filtersbot.Templates(action=action, name=name).pack()))
        
    templates_all = databasework.get_templates_db_all_user(str(user_id))
        
    for i in templates_all:
        name = i['name']
        action = 'get_t'
        markup.row(types.InlineKeyboardButton(text=(f"{name}"), callback_data=filtersbot.Templates(action=action, name=name).pack()))
    markup.row(types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô', callback_data='main'))
    
    return markup.as_markup()


def get_template_markup(name, have_text):
    markup = (
        InlineKeyboardBuilder()
        .button(text=('–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω ‚ûñ'), callback_data=filtersbot.EditTemplate(action='del_t', name_template=name, have_text=have_text).pack())
        .button(text=('–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω ‚ûï'), callback_data=filtersbot.EditTemplate(action='dup_t', name_template=name, have_text=have_text).pack())
        .button(text=('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç üñä'), callback_data=filtersbot.EditTemplate(action='ed_t_t', name_template=name, have_text=have_text).pack())
        .button(text=('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ üñä'), callback_data=filtersbot.EditTemplate(action='ed_t_s', name_template=name, have_text=have_text).pack())
        .button(text=('–ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª üñä'), callback_data=filtersbot.EditTemplate(action='ed_t_a', name_template=name, have_text=have_text).pack())
        .button(text=('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ñ—Ñ–µ—Ä—ã üñä'), callback_data=filtersbot.EditTemplate(action='ed_t_o', name_template=name, have_text=have_text).pack())
        .button(text=('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô'), callback_data='main')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup


def text_or_no_markup():
    markup = (
        InlineKeyboardBuilder()
        .button(text='–î–ª—è –æ—Ç–∑—ã–≤–∞ —Å —Ç–µ–∫—Å—Ç–æ–º ‚ûï', callback_data='review_with_text')
        .button(text='–î–ª—è –æ—Ç–∑—ã–≤–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚ûñ', callback_data='review_no_text')
        .button(text=('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô'), callback_data='main')
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup



def question_markup(articul):
    markup = (
        InlineKeyboardBuilder()
        .button(text=('–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É üîú'), url=(f'https://www.ozon.ru/product/{articul}'))
        .adjust(2, repeat=True)
        .as_markup()
    )
    return markup
